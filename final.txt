TITLE:
Max Kacere – CSCI 200
Project: PAC‑MAN Clone (Arcade Ver.)

PROBLEM DESCRIPTION:
Recreate the classic 1980 PAC‑MAN arcade game in modern C++ using SFML.
The program simulates accurate movement, scoring,
ghost AI, and a high‑score table, while remaining fully crossplatform.

PROGRAM DOCUMENTATION:
- Build & run with Makefile simply running $make run
- Due to a MacOS update, depricating SFML, you must use an older
    version of clang (I used clang16), if not applicable to you, 
    comment out the line in the Makefile with that path and uncomment the 
    one that just says # CXX = g++
- Requires SFML 2.6 (Graphics, Window, System).  Assets live in /assets.
- Paste your path to SFML@2 where mine is
- Use enter to go from mainmenu-state to playing-state.
- Use WASD or arrow keys to move, '.' to activate the debug mode while in the playing-state
- enter to go to playing state, space to leave playing state. esc to close main menu

Extension ideas for another programmer:
- Add bonus fruit items that spawn each level.
- Implement game‑pad input via sf::Joystick.
- Online leaderboard via simple REST API.
- CRT shader toggle for retro visuals.

CLASS DESCRIPTION:
Class `Ghost` is a parent that encapsulates individual ghost behaviour: position, movement
state machine (Scatter/Chase/Frightened/Eaten), per‑frame animation and AI
targeting logic. Encapsulation keeps from having the exact same functions
within all of the ghost children making the code cleaner and easier to debug
because now theres only one place to change that will apply to all of the ghosts.

LIST DATA STRUCTURE:
A 'std::vector<std::vector<int>>' maze grid stores tile codes (wall, pellet,
power‑pellet, gate). 'vector' was chosen for cache locality, random access
speed and dynamic resizing after automatic map analysis.

FILE I/O:
High scores persist in “scores.txt”.  On game‑over the player’s initials and
score append to the file; at start‑up the file is read, sorted and displayed
on the end‑game screen so scores survive between sessions.

PROJECT MODIFICATIONS:
The original proposal aimed for dynamic maze selection. Due to time,
only the classic layout shipped.  However, automatic map analysis was
added: the program samples pixel colours from the baked map texture to
derive wall‑vs‑pellet data, eliminating manual JSON tile maps entirely.
therefore any map could be implimneted with minimal effort!

REFLECTIONS:
This project demonstrated the importance of inheritence and creating objects with
dedicated objective. Modularizing everything made it much simpler to integrate into the game.
logic—bugs disappeared once I moved animation into its own class.
Given another iteration I would prototype input and frame‑timing early, because subtle
timing drift surfaced only after integrating animation based on deltatime and not a set frametime!
